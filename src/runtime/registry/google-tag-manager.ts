// WARNING: This file is automatically generated, do not manually modify.
import { withQuery } from 'ufo'
import type { GoogleTagManagerApi } from 'third-party-capital'
import { defu } from 'defu'
import { useRegistryScript } from '#nuxt-scripts-utils'
import type { RegistryScriptInput } from '#nuxt-scripts'
import { object, string, optional } from '#nuxt-scripts-validator'

export const GoogleTagManagerOptions = object({ id: string(), dataLayerName: optional(string()) })

declare global {
  interface Window extends GoogleTagManagerApi {}
}
export type GoogleTagManagerInput = RegistryScriptInput<typeof GoogleTagManagerOptions>

function use(options: GoogleTagManagerInput) {
  return { dataLayer: window.dataLayers[options.dataLayerName!], google_tag_manager: window.google_tag_manager }
}

export function useScriptGoogleTagManager(_options?: GoogleTagManagerInput) {
  _options = defu(_options, { dataLayerName: 'defaultGtm' })
  return useRegistryScript<ReturnType<typeof use>, typeof GoogleTagManagerOptions>(_options?.key || 'google-tag-manager', options => ({
    scriptInput: {
      src: withQuery('https://www.googletagmanager.com/gtm.js', { id: options?.id }),
    },
    schema: import.meta.dev ? undefined : GoogleTagManagerOptions,
    scriptOptions: {
      use: () => use(options),
      stub: import.meta.client ? undefined : ({ fn }) => { return fn === 'dataLayer' ? [] : void 0 },
      performanceMarkFeature: 'nuxt-third-parties-gtm',
      ...({ tagPriority: 1 }),
    },
    // eslint-disable-next-line
        clientInit: import.meta.server ? undefined : () => {window.dataLayers=window.dataLayers||{};window.dataLayers[options.dataLayerName!]=window.dataLayers[options.dataLayerName!]||[];window.dataLayers[options.dataLayerName!].push({'gtm.start':new Date().getTime(),event:'gtm.js'});},
  }), _options)
}
